#!/usr/bin/awk -f

{ L[NR] = $0; Lm = NR }

function f(lineno, offset, n,    i, len, ss) {
  len = length(n) + 1
  if (offset > 1) {
    offset--
    len++
  }
  for (i = lineno > 1 ? -1 : 0; i <= 1; i++) {
    ss = substr(L[lineno + i], offset, len)
    gsub(/[0-9.]/, "", ss)
    if (ss) return 1
  }
  return 0
}

function getnum(lineno, l, res,    line, len, k, r) {
  line = L[lineno]
  len = length(line)

  if (substr(line, l, 1) ~ /[0-9]/) {
    r = l
    while (l > 1   && substr(line, l-1, 1) ~ /[0-9]/) l--;
    while (r < len && substr(line, r+1, 1) ~ /[0-9]/) r++;
  }
  if (r) {
    k = lineno SUBSEP l SUBSEP r - l + 1
    if (!(k in res)) {
      res[k] = 0+substr(line, l, r - l + 1)
      return 1
    }
  }
  return 0
}

function g(lineno, offset,    i, len, rlen, res, gear) {
  split("", res)
  len = length(L[lineno])
  for (i = lineno > 1 ? -1 : 0; i <= 1; i++) {
    if (offset > 1  ) rlen += getnum(lineno + i,offset-1,res)
                      rlen += getnum(lineno + i,offset  ,res)
    if (offset < len) rlen += getnum(lineno + i,offset+1,res)
  }

  if (rlen == 2) {
    gear = 1
    for (i in res) gear = gear * res[i]
    return gear
  }
  return 0
}

END {
  for (i = 1; i <= Lm; i++) {
    line = L[i]
    for (j = 1; j < length(line) && match(ss=substr(line, j), /\*|[0-9]+/); j += RLENGTH) {
      j += RSTART - 1
      n = substr(ss, RSTART, RLENGTH)
      if (n == "*") {
        gears += g(i, j)
        if (g(i,j)) printf("%d,%d %d\n", i, j, g(i, j))
      } else {
        if (f(i, j, n))
          sum += n
      }
    }
  }
  print sum, gears
}
